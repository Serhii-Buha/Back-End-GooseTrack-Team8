{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "Goose Track",
    "description": "Showing off swagger-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json",  "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [ {"url": "https://goose-back-end.onrender.com"}, { "url": "http://localhost:3000"  }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
        "name": "Reviews",
        "description": "Reviews endpoints"
    },
    {
        "name": "Tasks",
        "description": "Tasks endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],

        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
     "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
           "403": {
            "description": "Email doesn't exist / Password is wrong",
            "content": {}
          }
        }
      }
    },
     "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Logout success",
            "content": {}
          },
          "400": {
            "description": "No token provided",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
     "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get information about the current user",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Information found",
             "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {}
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          }
        }
      }
    },
      "/users/edit": {
      "patch": {
        "tags": ["User"],
        "summary": "Update information about the current user",
        "security": [{ "Bearer": [] }],
        "parameters": [],
         "requestBody": {
          "description": "Update user object",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Information update",
             "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Invalid user / Invalid session",
            "content": {}
          },
            "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/reviews":{ 
        "get": {
        "tags": ["Reviews"],
        "summary": " Get all reviews about product",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Information found",
             "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllReviewsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
              "500": {
            "description": "Server error"
          }
        }
      }

    
    },
    "/reviews/own": {
       "post": {
        "tags": ["Reviews"],
        "summary": "Create a new review",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Review's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ОК - Review was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateReviewResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Bad request(invalid request body)"
          },
          "409": {
            "description": "User already has a review"
          }
        }
      },
      "get": {
        "tags": ["Reviews"],
        "summary": "Get review by user id",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "ОК",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsByIdUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
        "patch": {
        "tags": ["Reviews"],
        "summary": "Change and update review by user id",
        "parameters": [],
        "security": [{ "Bearer": [] }],
          "requestBody": {
          "description": "Review's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "ОК-Review updated",
              "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateReviewResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
    },
      "delete": {
        "tags": ["Reviews"],
        "summary": "Delete review by user id",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "ОК-Review deleted"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
    }
    },
     "/tasks/query":{ 
        "get": {
        "tags": ["Tasks"],
        "summary": " Get all user tasks by month",
         "parameters": [
          {
            "name": "year",
            "in": "query",
            "required": true,
            "type": "string",
            "example": "2023"
          },
          {
            "name": "month",
            "in": "query",
            "required": true,
            "type": "string",
            "example": "8"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Information found",
             "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllTasksResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
              "500": {
            "description": "Server error"
          }
        }
      }},
"/tasks":{
     "post": {
        "tags": ["Tasks"],
        "summary": "Create a new task",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Task's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskRequest"
              }
            }
          
        }},
        "responses": {
          "200": {
            "description": "ОК - Task was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTaskResponse"
                }
              }
            }
        },
             "400": {
            "description": "Bad request (invalid request body) / No token provided"
            },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Bad request(invalid request body)"
          }
        }
      
    }},
    "/tasks/{id}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Change task by user id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "example": "64983b139dd09fca9aaa6da4"
            
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Task's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ОК",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTaskResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete task by user's id",
        "parameters": [{"name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "example": "64983b139dd09fca9aaa6da4"}],
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "ОК-Task deleted"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
    }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
         "type": "object",
        "required": ["email", "password", "name"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123.",
            "minLength": 8,
            "maxLength": 100
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "minLength": 2,
            "maxLength": 100,
            "example": "Adam"
          }
        }
      },
      "RegistrationResponse": {
         "type": "object",
        "properties": {
           "token": {
            "type": "string",
            "description": "User's token"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
             }}},
        "example":{
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OTgzYjEzOWRkMDlmY2E5YWFhNmRhNCIsImlhdCI6MTY4NzY5ODE5NSwiZXhwIjoxNjg3Njk4Mzc1fQ.P3ZWu3PzRpMyuT6ngche4ojbYizBvnOOnTSqniABkhQ",
          "user": {
            "name": "Adam",
            "email": "adam@gmail.com"
          }
        }
      },
      "LoginRequest":{
         "type": "object",
         "required": ["email", "password"],
            "properties":{
            "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          }  ,
           "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123.",
            "minLength": 8,
            "maxLength": 100  
          }
        }
      },
      "LoginResponse":{
          "type": "object",
        "required": ["email", "password"],
        "properties": { 
            "token": {
            "type": "string",
            "description": "User's token"
          },
          "user":{
            "type": "object",
            "properties":{
               "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
            },
              "name":{
              "type": "string",
              "description": "User's name "
            } 
            }
          }
        }
      },
      "CurrentResponse":{
         "type": "object",
            "properties":{
               "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          }  ,
           "_id": {
            "type": "string",
            "description": "User's id"
          },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar"
              },
              "phone":{
                 "type": "string",
                "description": "User's phone"
              },
              "skype":{
                 "type": "string",
                "description": "User's skype"
              },
              "name":{
                "type": "string",
                "description": "User's name "
            },
              "birthday":{
                "type": "string",
                "description": "User's day of birthday"
                }
               
            }
      },
      "UpdateUserRequest":{
         "type": "object",
        "properties": { 
            "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          },
              "phone":{
                 "type": "string",
                "description": "User's phone"
              },
              "skype":{
                 "type": "string",
                "description": "User's skype"
              },
              "name":{
                "type": "string",
                "description": "User's name "
            },
              "birthday":{
                "type": "string",
                "description": "User's day of birthday"
                }
        }
      },
      "UpdateUserResponse":{
         "type": "object",
         "properties":{
            "_id": {
            "type": "string",
            "description": "User's id"
          },
            "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          }  ,
              "avatarURL": {
                "type": "string",
                "description": "User's avatar"
              },
              "phone":{
                 "type": "string",
                "description": "User's phone"
              },
              "skype":{
                 "type": "string",
                "description": "User's skype"
              },
              "name":{
                "type": "string",
                "description": "User's name "
            },
              "birthday":{
                "type": "string",
                "description": "User's day of birthday"
                },
                  "token": {
            "type": "string",
            "description": "User's token"
          }
        },
         "example": {
          "_id": "64983b139dd09fca9aaa6da4",
          "name": "Adam",
          "email": "adam@gmail.com",
          "phone": "00 (000) 000 00 00",
          "birthday": "1991-11-30T00:00:00.000Z",
          "skype": "adamskype",
          "avatarURL": "http://www.gravatar.com/2a06849295a6965ddd313b186672c523.json",
          "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0OTgzYjEzOWRkMDlmY2E5YWFhNmRhNCIsImlhdCI6MTY4ODMwMDUzNCwiZXhwIjoxNjg4MzA0MTM0fQ.Dd09QhieWWuLMcIQGOKkrTFIGpaziWU7Tig2JkAzzp0"
        }
      },
      "AllReviewsResponse":{
         "type": "object",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Review id"
            },
            "rating": {
              "type": "number",
              "description": "Review rating"
            },
            "comment": {
              "type": "string",
              "description": "Review comment"
            },
               "owner": {
            "type": "object",
            "properties":{
           "_id": {
            "type": "string",
            "description": "User's id"
          },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar"
              },
              "name":{
                "type": "string",
                "description": "User's name "
            }
         
            }
          },
             "createdAt": { "type": "string" },
            "updatedAt": { "type": "string" }
            }
          },
           "example": [{
             "_id": "64ecfc80204ef6ac26614d21",
        "rating": 4,
        "comment": "A pleasant find for me. It's exactly what I was looking for. The main advantage is the visual visualization in the form of boards and cards. I recommend it!",
        "owner": {
            "_id": "64ecef267ca62acf240e9c47",
            "name": "Anton",
            "avatarUrl": "https://www.gravatar.com/avatar/162835976f342a6ca91346c3a328de56?d=wavatar"
        },
        "createdAt": "2023-08-28T19:58:56.407Z",
        "updatedAt": "2023-08-28T20:01:30.105Z"
        }]

      },
      "ReviewsByIdUserResponse":{
        "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Review id"
            },
            "rating": {
              "type": "number",
              "description": "Review rating"
            },
            "comment": {
              "type": "string",
              "description": "Review comment"
            },
                 "owner": {
            "type": "string",
            "description": "User's id"
          },
        
             "createdAt": { "type": "string" },
            "updatedAt": { "type": "string" }
          
          },
    
          "example": {
             "_id": "64ecfc80204ef6ac26614d21",
        "rating": 4,
        "comment": "A pleasant find for me. It's exactly what I was looking for. The main advantage is the visual visualization in the form of boards and cards. I recommend it!",
        "owner": "64ecef267ca62acf240e9c47",
        "createdAt": "2023-08-28T19:58:56.407Z",
        "updatedAt": "2023-08-28T20:01:30.105Z"
        }
       },
        "CreateReviewRequest":{
          "type": "object",
          "required":["rating", "comment"],
           "properties": {
          "rating": {
            "type": "number",
            "description": "Review rating",
            "example": "3"
          },
          "comment": {
            "type": "string",
            "description": "Review comment",
            "example": "Really helps to plan the day and visualize tasks. Exactly what I was looking for. Huge thanks to the developers!"
          }
        } 
        },
         "CreateReviewResponse":{
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Review id"
            },
            "rating": {
              "type": "number",
              "description": "Review rating"
            },
            "comment": {
              "type": "string",
              "description": "Review comment"
            },
                "owner": {
            "type": "object",
            "properties":{
           "_id": {
            "type": "string",
            "description": "User's id"
          },
              "avatarURL": {
                "type": "string",
                "description": "User's avatar"
              },
              "name":{
                "type": "string",
                "description": "User's name "
            }
         
            }
          },
             "createdAt": { "type": "string" },
             "updatedAt": { "type": "string" }
          },
              "example": {
             "_id": "64ecfc80204ef6ac26614d21",
        "rating": 4,
        "comment": "A pleasant find for me. It's exactly what I was looking for. The main advantage is the visual visualization in the form of boards and cards. I recommend it!",
        "owner": {
            "_id": "64ecef267ca62acf240e9c47",
            "name": "Anton",
            "avatarUrl": "https://www.gravatar.com/avatar/162835976f342a6ca91346c3a328de56?d=wavatar"
        },
        "createdAt": "2023-08-28T19:58:56.407Z",
        "updatedAt": "2023-08-28T20:01:30.105Z"
        }
         },
         "UpdateReviewRequest":{
           "type": "object",
          "required": ["rating", "comment"],
          "properties": {
         
            "rating": {
              "type": "number",
              "description": "Review rating",
               "example": "4"
            },
            "comment": {
              "type": "string",
              "description": "Review comment",
              "example": "New review"
            }
         }},
          "UpdateReviewResponse":{
           "type": "object",
          "properties": {
           "_id": {
              "type": "string",
              "description": "Review id"
            },
            "rating": {
              "type": "number",
              "description": "Review rating"
            },
            "comment": {
              "type": "string",
              "description": "Review comment"
            },
                 "owner": {
                  "type": "string",
                  "description": "Owner id"
                 },
             "createdAt": { "type": "string" },
             "updatedAt": { "type": "string" }
          },
             "example": {
             "_id": "64ecfc80204ef6ac26614d21",
        "rating": 4,
        "comment": "A pleasant find for me. It's exactly what I was looking for. The main advantage is the visual visualization in the form of boards and cards. I recommend it!",
        "owner":  "64ecef267ca62acf240e9c47",
        "createdAt": "2023-08-28T19:58:56.407Z",
        "updatedAt": "2023-08-28T20:01:30.105Z"
        }
         },
         "AllTasksResponse":{
              "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Task id"
            },
            "title": {
              "type": "string",
              "description": "Task title"
            },
            "start": {
              "type": "string",
              "description": "Task start"
            },
             "end": {
              "type": "string",
              "description": "Task end"
            }, 
             "priority": {
              "type": "string",
              "description": "Priority  one of [low, medium, high]"
            },
             "category": {
             "type":  "string",
             "description":   "Category One of [to-do, in-progress, done]"
      
             },
            "date": {
              "type": "string",
              "description": "Date must be in YYYY-MM-DD format"
            },
            "owner": {
              "type": "object",
              "description": "Task owner id"  
            },
             "createdAt": "2023-08-28T19:58:56.407Z",
        "updatedAt": "2023-08-28T20:01:30.105Z"
          },
           "example": {
            "_id": "64983b139dd09fca9aaa6da4",
            "title": "Learn how to use the forms",
            "start": "08:00",
            "end": "12:00",
            "priority": "low",
            "category": "to-do",
            "date": "2023-06-30",
            "owner": "64983b139dd09fca9aaa6da4",
             "createdAt": "2023-08-28T19:58:56.407Z",
        "updatedAt": "2023-08-28T20:01:30.105Z"
        }
         },
         "CreateTaskRequest":{
          
          "type": "object",
          "required":["title", "start", "end", "priority", "date", "category"],
          "properties": {
            "title": {
              "type": "string",
              "description": "Task title"
            },
            "start": {
              "type": "string",
              "description": "Task start"
            },
             "end": {
              "type": "string",
              "description": "Task end"
            }, 
             "priority": {
              "type": "string",
              "description": "Priority  one of [low, medium, high]"
            },
              "category": {
             "type":  "string",
             "description":   "Category One of [to-do, in-progress, done]"
      
             },
            "date": {
              "type": "string",
              "description": "Date must be in YYYY-MM-DD format"
            }
          },
           "example": {
            "title": "Learn how to use the forms",
            "start": "08:00",
            "end": "12:00",
            "priority": "low",
            "category": "to-do",
            "date": "2023-08-30"
        }
         },
          "CreateTaskResponse":{
          "type": "object",
          "description": "User new task",
          "properties": {
            "title": {
              "type": "string",
              "description": "Task title"
            },
            "start": {
              "type": "string",
              "description": "Task start"
            },
             "end": {
              "type": "string",
              "description": "Task end"
            }, 
             "priority": {
              "type": "string",
              "description": "Priority  one of [low, medium, high]"
            },
              "category": {
             "type":  "string",
             "description":   "Category One of [to-do, in-progress, done]"
      
             },
            "date": {
              "type": "string",
              "description": "Date must be in YYYY-MM-DD format"
            }
          },
           "example": {
            "title": "Learn how to use the forms",
            "start": "08:00",
            "end": "11:00",
            "priority": "low",
             "category": "to-do",
            "date": "2023-08-30"
        }
         },
         "UpdateTaskRequest":{
          "type": "object",
          "required":["title", "start", "end", "priority", "date", "category"],
          "properties": {
            "title": {
              "type": "string",
              "description": "Task title"
            },
            "start": {
              "type": "string",
              "description": "Task start"
            },
             "end": {
              "type": "string",
              "description": "Task end"
            }, 
             "priority": {
              "type": "string",
              "description": "Priority  one of [low, medium, high]"
            },
              "category": {
             "type":  "string",
             "description":   "Category One of [to-do, in-progress, done]"
      
             },
            "date": {
              "type": "string",
              "description": "Date must be in YYYY-MM-DD format"
            }
          },
           "example": {
            "title": "Learn how to use the forms",
            "start": "08:00",
            "end": "12:00",
            "priority": "low",
             "category": "to-do",
            "date": "2023-08-30"
        }
         },
         "UpdateTaskResponse":{
          "type": "object",
          "description": "Update user's task",
          "properties": {
            "title": {
              "type": "string",
              "description": "Task title"
            },
            "start": {
              "type": "string",
              "description": "Task start"
            },
             "end": {
              "type": "string",
              "description": "Task end"
            }, 
             "priority": {
              "type": "string",
              "description": "Priority one of [low, medium, high]"
            },
              "category": {
             "type":  "string",
             "description":   "Category One of [to-do, in-progress, done]"
      
             },
            "date": {
              "type": "string",
              "description": "Date must be in YYYY-MM-DD format"
            }
          },
           "example": {
            "title": "Learn how to use the forms",
            "start": "08:00",
            "end": "12:00",
            "priority": "low",
            "category": "to-do",
            "date": "2023-08-30"
        }
         }
    
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
    }
  }
